package com.wutsi.ecommerce.order.endpoint

import com.nhaarman.mockitokotlin2.any
import com.nhaarman.mockitokotlin2.argumentCaptor
import com.nhaarman.mockitokotlin2.never
import com.nhaarman.mockitokotlin2.times
import com.nhaarman.mockitokotlin2.verify
import com.wutsi.analytics.tracking.WutsiTrackingApi
import com.wutsi.analytics.tracking.dto.PushTrackRequest
import com.wutsi.analytics.tracking.entity.EventType
import com.wutsi.ecommerce.order.entity.OrderStatus
import com.wutsi.ecommerce.order.event.EventURN
import org.junit.jupiter.api.Test
import org.springframework.boot.test.mock.mockito.MockBean
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertNull

class ChangeStatusControllerOpenTest : AbstractChangeStatusControllerTest() {
    @MockBean
    private lateinit var trackingApi: WutsiTrackingApi

    private val status = OrderStatus.OPENED
    private val event = EventURN.ORDER_OPENED

    @Test
    fun created() {
        changeStatusSuccess("100", OrderStatus.CREATED, status, event)

        val order = orderDao.findById("100").get()
        val request = argumentCaptor<PushTrackRequest>()
        verify(trackingApi, times(2)).push(request.capture())

        val track1 = request.firstValue.track
        assertEquals(ACCOUNT_ID.toString(), track1.accountId)
        assertEquals(order.merchantId.toString(), track1.merchantId)
        assertEquals(TENANT_ID, track1.tenantId)
        assertEquals(DEVICE_ID, track1.deviceId)
        assertNotNull(track1.correlationId)
        assertEquals("11", track1.productId)
        assertNull(track1.page)
        assertEquals(EventType.ORDER.name, track1.event)
        assertNull(track1.impressions)
        assertNull(track1.lat)
        assertNull(track1.long)
        assertNull(track1.url)
        assertEquals(400.0, track1.value)

        val track2 = request.secondValue.track
        assertEquals(ACCOUNT_ID.toString(), track2.accountId)
        assertEquals(order.merchantId.toString(), track2.merchantId)
        assertEquals(TENANT_ID, track2.tenantId)
        assertEquals(DEVICE_ID, track2.deviceId)
        assertEquals(track1.correlationId, track2.correlationId)
        assertEquals("12", track2.productId)
        assertNull(track1.page)
        assertEquals(EventType.ORDER.name, track2.event)
        assertNull(track2.url)
        assertNull(track2.impressions)
        assertNull(track2.lat)
        assertNull(track2.long)
        assertEquals(500.0, track2.value)
    }

    @Test
    fun opened() {
        changeStatusSuccess("101", OrderStatus.OPENED, status, event)
        verify(trackingApi, never()).push(any())
    }

    @Test
    fun done() {
        changeStatusSuccessBadStatus("102", status)
        verify(trackingApi, never()).push(any())
    }

    @Test
    fun cancelled() {
        changeStatusSuccessBadStatus("103", status)
        verify(trackingApi, never()).push(any())
    }

    @Test
    fun expired() {
        changeStatusSuccessBadStatus("104", status)
        verify(trackingApi, never()).push(any())
    }

    @Test
    fun readyForPickup() {
        changeStatusSuccessBadStatus("105", status)
        verify(trackingApi, never()).push(any())
    }

    @Test
    fun inTransit() {
        changeStatusSuccessBadStatus("106", status)
        verify(trackingApi, never()).push(any())
    }

    @Test
    fun delivered() {
        changeStatusSuccessBadStatus("107", status)
        verify(trackingApi, never()).push(any())
    }
}
